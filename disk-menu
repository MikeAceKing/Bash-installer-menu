#!/bin/bash
REQUIRED_PKG="dialog"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: "$PKG_OK"
if [ "" = "$PKG_OK" ]; then
  echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
  apt install -y $REQUIRED_PKG
fi

shopt -s lastpipe
width=120
height=40
menu_height=20
backtitle='Disk-menu'
title='Device selection'


# Will store the menu numbers and (nicely formatted) lsblk lines as pairs.
# Later given to dialog as individual arguments.
choices=()

# Arrays to store the properties of a device according to a particular lsblk
# field.  At the very least, one needs to be able to look up the kname from the
# choice number.
knames=()
uuids=()
mountpoints=()
sizes=()

# Array indexes normally start from 0 in bash but, for the benefit of dialog,
# let's start from 1.
i=1

# This is a three part pipeline. The third part is the while loop.
lsblk -rno type,kname,uuid,mountpoint,size |
column -t -s ' ' |
while read -r line; do
	# We just read the (nicely formatted) line. Now split the line into
	# individual fields, assigning to bash variables.
	echo "$line" | read -r type kname uuid mountpoint size

	if [[ $type != part ]]; then
		# It's not a partition. Proceed directly to the next line.
		continue
	fi

	# Insert the line into the choices array for later use by dialog. Note that
	# two items are being appended to the array - the index number and the line
	# itself.
	choices+=("$i" "$line")

	# Stash the fields so that they be later looked up by the choice number.
	knames[i]=$kname
	uuids[i]=$uuid
	sizes[i]=$size

	# The mountpoint column output by lsblk may contain backslash-escape
	# sequences. This happens when the mountpoint contains whitespace or other
	# unusual characters. bash is able to decode properly with printf.
	mountpoints[i]=$(printf %b "$mountpoint")

	# Increment the index number for the next added device, if any.
	i=$((i + 1))
done

i=$(
	dialog \
		--clear \
		--stdout \
		--backtitle "$backtitle" \
		--title "$title" \
		--menu "Select partition (1-${#knames[@]}): " \
		"$height" "$width" "$menu_height" "${choices[@]}"
)

# Check whether i is empty, indicating that no choice was made.
if [[ ! $i ]]; then
	echo "No partition was selected. Aborting" >&2
	exit 1
fi
echo "You selected ${knames[i]}, which has a size of ${sizes[i]}"

width=120
height=40
menu_height=10
backtitle='Disk-menu'
title='Device selection'
menu='Choose one of the following options:'

ID="UUID=${uuid}"
MP="${ID} none	swap	swap	0	0"

options=(1 'Replacement of default swap'
         2 'Partitioning tool cfdisk'
         3 'Unmount partition'
         x reboot
         q quit )

result=$(dialog --clear \
                --backtitle "$backtitle" \
                --title "$title" \
                --menu "$menu" \
                "$height" "$width" "$menu_height" \
                "${options[@]}" \
                2>&1 >/dev/tty)

case "$result" in
     1) echo 'Replacement of swap';
	cp -v /etc/fstab /etc/fstab.backup;
	sed -i "/swap/c $MP" fstab;
	printf 'RESUME=%s\n' "$ID" > resume;
	echo "/sbin/mkswap /dev/$kname";
	echo "swapon -U $uuid /dev/$kname";
	echo update-initramfs -u -k all;;
     2) cfdisk /dev/"$kname";;
     3) umount "$mountpoint";;
     x) echo 'Reboot';
        reboot;;
     q) clear; 
        exit ;;
esac

